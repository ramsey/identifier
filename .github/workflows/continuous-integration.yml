# GitHub Actions Documentation: https://docs.github.com/en/actions

name: "build"

on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
    branches:
      - "main"

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  COMPOSER_ROOT_VERSION: "1.99.99"

jobs:
  coding-standards:
    name: "Coding standards"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v3"

      - name: "Check syntax (php-parallel-lint)"
        run: "composer dev:lint:syntax"

      - name: "Check coding standards (PHP_CodeSniffer)"
        run: "composer dev:lint:style"

  static-analysis:
    name: "Static analysis"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v3"

      - name: "Statically analyze code (PHPStan)"
        run: "composer dev:analyze:phpstan"

  code-coverage:
    name: "Code coverage"
    needs: ["coding-standards", "static-analysis"]
    runs-on: "${{ matrix.os }}"

    strategy:
      matrix:
        os:
          - "macos-latest"
          - "ubuntu-latest"
          #- "windows-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "xdebug"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v3"

      - name: "Run unit tests (PHPUnit)"
        run: "composer dev:test:coverage:ci"

      - name: "Publish coverage report to Codecov"
        uses: "codecov/codecov-action@v5"

  code-coverage-freebsd:
    name: "Code coverage (freebsd)"
    needs: ["coding-standards", "static-analysis"]
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "xdebug"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v3"

      - name: "Run unit tests on FreeBSD (PHPUnit)"
        uses: "vmactions/freebsd-vm@v1"
        with:
          usesh: true
          prepare: |
            pkg update
            pkg install -y php84 php84-bcmath php84-composer php84-dom \
              php84-gmp php84-mbstring php84-pecl-uuid php84-tokenizer \
              php84-xml php84-xmlreader php84-xmlwriter php84-zip php84-zlib
            pecl install xdebug
            sh -c 'echo "zend_extension=xdebug" > /usr/local/etc/php/ext-20-xdebug.ini'
            sh -c 'echo "xdebug.mode=coverage" >> /usr/local/etc/php/ext-20-xdebug.ini'
          run: "composer dev:test:coverage:ci"

      - name: "Publish coverage report to Codecov"
        uses: "codecov/codecov-action@v5"

  benchmark:
    name: "Benchmark"
    needs: ["code-coverage", "code-coverage-freebsd"]
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php:
          - "8.2"
          - "8.3"
          - "8.4"

    steps:
      - name: "Configure Git"
        run: "git config --global safe.directory '*'"

      - name: "Checkout repository"
        uses: "actions/checkout@v3"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php }}"
          coverage: "none"
          ini-values: "memory_limit=-1"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v2"

      - name: "Run benchmark (PHPBench)"
        run: |
          mkdir -p build/bench/
          composer dev:test:bench:ci

      - name: "Upload benchmark artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "Benchmark (PHP ${{ matrix.php }})"
          path: "build/bench/"

  unit-tests:
    name: "Unit tests"
    needs: ["code-coverage", "code-coverage-freebsd"]
    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        php:
          - "8.2"
          - "8.3"
          - "8.4"
        os:
          - "macos-latest"
          - "ubuntu-latest"
          - "windows-latest"
        composer-deps:
          - "lowest"
          - "highest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php }}"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v3"
        with:
          dependency-versions: "${{ matrix.composer-deps }}"

      - name: "Run unit tests (PHPUnit)"
        run: "composer dev:test:unit"
